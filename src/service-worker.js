/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.


// const cache_names = {
//     static: 'bookshop-static-v1',
//     dynamic: 'bookshop-dynamic-v1',
// };
//
// const cache_urls = [
//     './',
//     './styles/font-awesome.css',
//     './styles/vazir.css',
//     './fonts/font-awesome/fa-light-300.woff2',
//     './fonts/font-awesome/fa-regular-400.woff2',
//     './fonts/font-awesome/fa-solid-900.woff2',
//     './fonts/vazir/Vazir-Regular-FD.woff2',
//     './fonts/vazir/Vazir-Regular-FD.woff',
//     './fonts/vazir/Vazir-Regular-FD.ttf',
//     './fonts/vazir/Vazir-Regular-FD.eot',
//     './fonts/vazir/Vazir-Medium-FD.woff2',
//     './fonts/vazir/Vazir-Medium-FD.woff',
//     './fonts/vazir/Vazir-Medium-FD.ttf',
//     './fonts/vazir/Vazir-Medium-FD.eot',
//     './fonts/vazir/Vazir-Bold-FD.woff2',
//     './fonts/vazir/Vazir-Bold-FD.woff',
//     './fonts/vazir/Vazir-Bold-FD.ttf',
//     './fonts/vazir/Vazir-Bold-FD.eot',
//     './images/apple-touch-icon.png',
//     './images/favicon.ico',
//     './images/favicon16.png',
//     './images/favicon32.png',
//     './images/logo192.png',
//     './images/logo512.png',
//     './images/maskable.png',
//     './images/auth-background.svg',
//     './images/coming-soon.svg',
//     './images/empty-cart.svg',
//     './images/server-down.svg',
//     './images/no-data.svg',
//     './images/not-found.svg',
//     './images/placeholder.png',
//     './robot.txt',
//     './manifest.json',
//     './sw.js',
// ];
//
//
// // install
// self.addEventListener('install', (e) => {
//
//     e.waitUntil(
//         caches.open(cache_names["static"]).then(cache => {
//             cache.addAll(cache_urls).then(() => {
//                 self.skipWaiting();
//             });
//         })
//     );
//
// });
//
// // fetch
// self.addEventListener('fetch', (e) => {
//
//     // stale while revalidate
//     if (
//         e.request.method === 'GET' &&
//         (
//             e.request.url.startsWith('https://bookshop-alirezanaghdi.ir') ||
//             e.request.url.startsWith('https://www.bookshop-alirezanaghdi.ir') ||
//             e.request.url.startsWith('https://localhost:3000')
//         )
//     ) {
//         e.respondWith(
//             caches.match(e.request).then(cache => {
//                 return (
//                     cache || fetch(e.request).then(networkResponse => {
//                         return caches.open(cache_names['dynamic']).then(cache => {
//                             cache.put(e.request, networkResponse.clone());
//                             return networkResponse;
//                         });
//                     })
//                 );
//             })
//         );
//     }
//
//     // network first
//     if (
//         e.request.method === 'GET' &&
//         (
//             e.request.url.startsWith('https://alireza-bookshop.herokuapp.com/api') ||
//             e.request.url.startsWith('http://localhost:4000/api')
//         )
//     ) {
//         e.respondWith(
//             fetch(e.request)
//                 .then(networkResponse => {
//                     return caches.open(cache_names["dynamic"]).then(cache => {
//                         cache.put(e.request, networkResponse.clone());
//                         return networkResponse;
//                     });
//                 })
//         );
//     }
//
//
//     // network only
//     if (e.request.url.startsWith('chrome-extension')) {
//         e.respondWith(fetch(e.request));
//     }
//
// });
//
// // activate
// self.addEventListener('activate', (e) => {
//
//     e.waitUntil(
//         caches.keys().then(cacheNames => {
//             return Promise.all(
//                 cacheNames.map(cacheName => {
//                     if (!Object.values(cache_names).includes(cacheName)) {
//                         return caches.delete(cacheName);
//                     }
//                 })
//             )
//         })
//     );
//
// });